# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do  
  lane :beta do
    
    sync_code_signing(
      type: "development", 
      # development key sometimes update provision profile. Like add new people or devices to test flight.
      # do not use readonly unless you want to manually update key
      # readonly: true 
    )

    # create .cer file in local
    cert()
	
    Dir.chdir("..") do
      cert_file = Dir["*.cer"].sort_by { |x| File.mtime(x) }.last
      info = Match::Utils.get_cert_info(cert_file)
      identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
      # a very hacky method for generic fastlane
      # find the Common name inside cer file.
      # and set it to .xcworkspace so the default sign identity value not null. If null the gym/build method will fail.
      Match::TablePrinter.print_certificate_info(cert_info: info)	
      #unity xcode project have empty field cause build failure if not manually specify profile and key
      puts "#{info[1][1]}"
      update_project_provisioning(
        profile:  ENV["sigh_" + identifier + "_development_profile-path"] ,
        code_signing_identity: "#{info[1][1]}",
      )
    end

    sh "printenv | sort"
    lane_context()

    build_app(
      clean: true,
      # manually set signing to manual and set provision profile due gym not use correct setting when build over non interact console.
      export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),      
      export_options: {
        method: "development",
        signingStyle: "manual",
        provisioningProfiles: { 
          identifier => "match Development " + identifier
        }
      }
    )

    sh "printenv | sort"
    lane_context()    
  end
end
